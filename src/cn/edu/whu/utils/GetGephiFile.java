/**
 * 
 */
package cn.edu.whu.utils;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.LineIterator;

import cn.edu.whu.pojo.GephiEdge;
import cn.edu.whu.pojo.GephiNode;

/**
 * @author bczhang
 *处理用户关系文件，得到符合gephi数据格式的文件
 */
public class GetGephiFile {

	static Set<GephiNode> nodeL=new HashSet<>();
	/**
	 * @param args
	 */
	//static String str="2681435251 1277127435 1303925914 1682352065 1735885001 1744825334 2291717992 2300716454 2336499492 2342239405 2362705467 2363459284 1291843462 1298901554 1638781994 1642351362 1653527683 1653638724 1730077315 1730243272 1747383061 1752467960 1774955084 1816011541 1864665463 1866842665 1888148263 1942634172 1962310741 1195230310 1195242865 1195354434 1342829361 1384952882 1608574203 1618051664 1639498782 1642909335 1644492510 1706035271 1733838873 1763582395 1838168847 1863292271 1866882821 1883848203 1883889533 1978843087 2043129485 2130434435 2141100877 2143297884 2204033420 2508121611 2608433792 2610779417 2612249974 1162178432 1188552450 1191220232 1191258123 1192329374 1192515960 1195403385 1197161814 1197931472 1198920804 1223178222 1223762662 1253587884 1287340491 1345467925 1511484000 1656809190 1686326292 1699432410 1745942661 1780417033 1800188031 1827271113 1832865575 1886036432 2188745734 2546883162 1781378107 1793285524 1890475201 1917285912 1956423350 1958261192 2072457167 2102544234 2144576481 2452789653 2456673982 2476121622 2483937564 2485458775 2490707353 2619436064 1348502050 1556336164 1729910500 1784537661 2071321393 2099988610 2115176080 2218712947 2254853262 2659606340 2661798111 2671349093 2688917021";
	//关注关系
	//static String str="2681435251 1958261192 2688917021 2671349093 2619436064 2610779417 1956423350 2546883162 1942634172 2483937564 2099988610 1706035271 2362705467 ";
	//static String str="1032153895 1227086635 1235733075 1261700994 1282005885 1288113654 1304194202 1401526545 1517934944 1605409293 1682352065 1712539910 1717022775 1719014980 1719232542 1719242732 1735902985 2275914794 2282463515 2289674265 2295389250 2296933610 2298996762 2309921197 2312939722 2321412074 2324540472 2329639004 2335611615 2341463241 2341924857 2345435190 2348546092 2369328852 2369808135 2371191785 1249193625 1250041105 1271542887 1404641472 1413971423 1642591402 1642635773 1684012243 1698414573 1703513687 1705602977 1722594714 1722656062 1734536090 1741514817 1742727537 1752484533 1763544170 1774978073 1778857227 1789618721 1834134725 1834910930 1836175780 1838066011 1853946117 1853949425 1865532255 1870605083 1870625223 1892464897 1925919477 1950882643 1182391231 1195230310 1195242865 1228486722 1557721227 1608574203 1618051664 1642909335 1644250693 1644394154 1670645393 1686192095 1686230250 1704116960 1730336902 1742987497 1751035982 1760553712 1763582395 1773041022 1803561660 1811410782 1826111453 1857988230 1859313312 1859451554 1861951194 1912748833 1916986680 1917578731 1962679875 1970116653 2012174510 2015735691 2026014915 2035235897 2041418617 2092518217 2120726553 2121679193 2190448124 2239632627 2248924417 2248977990 2256231983 2499615414 2506800343 2506966302 2507787431 2590499382 2606812930 1037321977 1063774800 1089278210 1191220232 1192329374 1192515960 1214112203 1218869573 1222746542 1223178222 1223179064 1223762662 1234692083 1241148864 1257818405 1257866011 1266286555 1266321801 1270062022 1345467925 1345566427 1549171853 1644730997 1656809190 1686326292 1710085271 1710335571 1730726637 1730761202 1751309223 1762201170 1788215537 1796469287 1821898647 1829942640 1848183771 1879527257 1909358262 1913787020 1938284521 2003760093 2108831790 2120037082 2142168143 2163583002 2175969950 2239743665 2243894260 2546120490 2548856162 2553655690 2561135144 1773283005 1781387491 1785075474 1794824567 1854283601 1854364873 1893749465 1893754712 1898222053 1923314612 1970712423 2014938155 2026583317 2047893792 2066785327 2099886920 2109041622 2161590657 2194418964 2197915224 2247195144 2455421205 2456348813 2456575254 2458816064 2462482763 2474053944 2478190263 2490536961 2517906912 2518461243 2524301940 2525394790 2526776920 2628069144 2639275777 2639277657 2641265431 1457478803 1569904293 1629810574 1649230644 1651317627 1683381032 1692544657 1708736515 1727334720 1736346195 1745275131 1746274673 1763251165 1764016622 1764105342 1767981164 1769152985 1784537661 1805385014 1826513532 1854471750 1857305320 1864528464 1882036421 1882036482 1980923321 2010401653 2045972731 2080115155 2094088250 2107073441 2118730102 2118754051 2132396244 2179825195 2218712947 2533021810 2694359913 ";
	static String str="1032153895 1605409293 2247195144 2335611615 2341463241 2499615414 1870625223 1222746542 2506800343 1789618721 2478190263 2324540472 2475256131 2094088250 1846979645 2371191785 1404641472 2161590657 2619137670 1708736515 2456575254 2239743665 2546120490 2348546092 1882036482 2456348813 2617188474 1913787020 1683381032 2092518217 2341924857 2275914794 2507787431 1762201170 1764016622 1917578731 1089278210 2118730102 2561135144 1760553712 1970712423 1912748833 1736346195 2248977990 2588470544 2527514793 2121679193 2597461194 2194418964 2590499382 1166432124 1037321977 1651317627 2458816064 1801065963 1401526545 2132396244 2197915224 2490536961 1950882643 2597419482 1879527257 1788215537 2512976435 2558305044 2329639004 1698804317 1569904293 1855808282 2345435190 1730761202 1882036421 1834910930 2628069144 1063774800 2518461243 2298996762 2548856162 2012632914 2177020732 2484892551 2533021810 2118754051 1763544170 2369328852 2012174510 1684621410 1549171853 2058230391 2190448124 1140481175 2296933610 2487576965 1994680735 2248924417 2619049894 1076881300 1288113654 2309921197 2010401653 2105070574 ";
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		//initNode("E:/spam/3_UltimateSelected/UID.txt");
		//initEdge("E:/spam/3.1_graphFetures/1032153895friends_edge.txt");
		//getUIDSet();
		//extractALlRelation("D:/Whuer/FudanData/weibo_follows.csv","E:/spam/3.1_graphFetures/uidfollows_set.txt", "E:/spam/3.1_graphFetures/uidfollow_set_edge.txt");
		//getEdge("2681435251 1277127435 1303925914 1682352065 1735885001 1744825334 2291717992 2300716454 2336499492 2342239405 2362705467 2363459284 1291843462 1298901554 1638781994 1642351362 1653527683 1653638724 1730077315 1730243272 1747383061 1752467960 1774955084 1816011541 1864665463 1866842665 1888148263 1942634172 1962310741 1195230310 1195242865 1195354434 1342829361 1384952882 1608574203 1618051664 1639498782 1642909335 1644492510 1706035271 1733838873 1763582395 1838168847 1863292271 1866882821 1883848203 1883889533 1978843087 2043129485 2130434435 2141100877 2143297884 2204033420 2508121611 2608433792 2610779417 2612249974 1162178432 1188552450 1191220232 1191258123 1192329374 1192515960 1195403385 1197161814 1197931472 1198920804 1223178222 1223762662 1253587884 1287340491 1345467925 1511484000 1656809190 1686326292 1699432410 1745942661 1780417033 1800188031 1827271113 1832865575 1886036432 2188745734 2546883162 1781378107 1793285524 1890475201 1917285912 1956423350 1958261192 2072457167 2102544234 2144576481 2452789653 2456673982 2476121622 2483937564 2485458775 2490707353 2619436064 1348502050 1556336164 1729910500 1784537661 2071321393 2099988610 2115176080 2218712947 2254853262 2659606340 2661798111 2671349093 2688917021 ");
	   // getEdge("1032153895 1227086635 1235733075 1261700994 1282005885 1288113654 1304194202 1401526545 1517934944 1605409293 1682352065 1712539910 1717022775 1719014980 1719232542 1719242732 1735902985 2275914794 2282463515 2289674265 2295389250 2296933610 2298996762 2309921197 2312939722 2321412074 2324540472 2329639004 2335611615 2341463241 2341924857 2345435190 2348546092 2369328852 2369808135 2371191785 1249193625 1250041105 1271542887 1404641472 1413971423 1642591402 1642635773 1684012243 1698414573 1703513687 1705602977 1722594714 1722656062 1734536090 1741514817 1742727537 1752484533 1763544170 1774978073 1778857227 1789618721 1834134725 1834910930 1836175780 1838066011 1853946117 1853949425 1865532255 1870605083 1870625223 1892464897 1925919477 1950882643 1182391231 1195230310 1195242865 1228486722 1557721227 1608574203 1618051664 1642909335 1644250693 1644394154 1670645393 1686192095 1686230250 1704116960 1730336902 1742987497 1751035982 1760553712 1763582395 1773041022 1803561660 1811410782 1826111453 1857988230 1859313312 1859451554 1861951194 1912748833 1916986680 1917578731 1962679875 1970116653 2012174510 2015735691 2026014915 2035235897 2041418617 2092518217 2120726553 2121679193 2190448124 2239632627 2248924417 2248977990 2256231983 2499615414 2506800343 2506966302 2507787431 2590499382 2606812930 1037321977 1063774800 1089278210 1191220232 1192329374 1192515960 1214112203 1218869573 1222746542 1223178222 1223179064 1223762662 1234692083 1241148864 1257818405 1257866011 1266286555 1266321801 1270062022 1345467925 1345566427 1549171853 1644730997 1656809190 1686326292 1710085271 1710335571 1730726637 1730761202 1751309223 1762201170 1788215537 1796469287 1821898647 1829942640 1848183771 1879527257 1909358262 1913787020 1938284521 2003760093 2108831790 2120037082 2142168143 2163583002 2175969950 2239743665 2243894260 2546120490 2548856162 2553655690 2561135144 1773283005 1781387491 1785075474 1794824567 1854283601 1854364873 1893749465 1893754712 1898222053 1923314612 1970712423 2014938155 2026583317 2047893792 2066785327 2099886920 2109041622 2161590657 2194418964 2197915224 2247195144 2455421205 2456348813 2456575254 2458816064 2462482763 2474053944 2478190263 2490536961 2517906912 2518461243 2524301940 2525394790 2526776920 2628069144 2639275777 2639277657 2641265431 1457478803 1569904293 1629810574 1649230644 1651317627 1683381032 1692544657 1708736515 1727334720 1736346195 1745275131 1746274673 1763251165 1764016622 1764105342 1767981164 1769152985 1784537661 1805385014 1826513532 1854471750 1857305320 1864528464 1882036421 1882036482 1980923321 2010401653 2045972731 2080115155 2094088250 2107073441 2118730102 2118754051 2132396244 2179825195 2218712947 2533021810 2694359913 ");
	   // getEdge("2681435251 1958261192 2688917021 2671349093 2619436064 2610779417 1956423350 2546883162 1942634172 2483937564 2099988610 1706035271 2362705467 ");
	 //  getEdge("1032153895 1605409293 2247195144 2335611615 2341463241 2499615414 1870625223 1222746542 2506800343 1789618721 2478190263 2324540472 2475256131 2094088250 1846979645 2371191785 1404641472 2161590657 2619137670 1708736515 2456575254 2239743665 2546120490 2348546092 1882036482 2456348813 2617188474 1913787020 1683381032 2092518217 2341924857 2275914794 2507787431 1762201170 1764016622 1917578731 1089278210 2118730102 2561135144 1760553712 1970712423 1912748833 1736346195 2248977990 2588470544 2527514793 2121679193 2597461194 2194418964 2590499382 1166432124 1037321977 1651317627 2458816064 1801065963 1401526545 2132396244 2197915224 2490536961 1950882643 2597419482 1879527257 1788215537 2512976435 2558305044 2329639004 1698804317 1569904293 1855808282 2345435190 1730761202 1882036421 1834910930 2628069144 1063774800 2518461243 2298996762 2548856162 2012632914 2177020732 2484892551 2533021810 2118754051 1763544170 2369328852 2012174510 1684621410 1549171853 2058230391 2190448124 1140481175 2296933610 2487576965 1994680735 2248924417 2619049894 1076881300 1288113654 2309921197 2010401653 2105070574 ");
		getAllEdgeFile();
	}
	public static  void initNode(String path){
		String UIDStr;
		GephiNode node;
		Utils utils=new Utils();
		List<String> nodeList=new LinkedList<>();
		try {
			UIDStr=FileUtils.readFileToString(new File(path));
			//String[] arr=UIDStr.split("\n");
			String[] arr=str.split(" ");
			Integer i=0;
			for(String ss:arr){
				 node=new GephiNode();
				 node.setId(ss);
				 node.setLabel(ss);
				 node.setModularityClass(ss);
				 nodeList.add(node.toString());
				 nodeL.add(node);
				 i++;
			}
			utils.exportCsv(new File("E:/spam/3.1_graphFetures/spam_example/friends_node.csv"),nodeList);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static  void initEdge(String path){
		String fuidStr;
		GephiEdge edge;
		Utils utils=new Utils();
		List<String> edgeList=new LinkedList<>();
		try {
			fuidStr=FileUtils.readFileToString(new File(path));
			String[] line=fuidStr.trim().split("\n");
			//String[] line=str.split(" ");
			Integer i=0;
			for(String ss:line){
				String [] arr=ss.split(" ");
				
				edge=new GephiEdge();
				edge.setId(i.toString());
				//粉丝关系图，有向边是粉丝指向用户
				edge.setSource(arr[1].trim());
				edge.setTarget(arr[0].trim());
				//edge.setType("Directed");
				edge.setWeight("1");
				edgeList.add(edge.toString());
				i++;
			}
			utils.exportCsv(new File("E:/spam/3.1_graphFetures/spam_example/friendsedge.csv"),edgeList);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void  getAUserGraph(String path ,String uid){
		try {
			String Str=FileUtils.readFileToString(new File(path));
			//String 
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	/**
	 * 得到文件
	 */
	public static void getAllEdgeFile(){
		//File file=new File("E:/spam/3.1_graphFetures/341uidfriends.txt");
		//File file=new File("D:/Whuer/FormerData/200_uid_friends.txt");
		File file=new File("E:/normal/3.1_graphFetures/400uidfollows.txt");
		 LineIterator iter=null;
		 try {
			iter = FileUtils.lineIterator(file);
			while(iter.hasNext()){
				String line=iter.nextLine().trim();
				getEdge(line);
				
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	/**
	 * 得到一个用户的（粉丝或者关注）所有的边
	 * @param一个字符串数组，arr[0] 存一个用户的id,arr[1]-arr[..]是用户的粉丝或者关注者
	 */
	 public  static void  getEdge(String uidfLine){
		 //得到所有的边关系
		 
		 File weiboRelation=new File("D:/Whuer/FudanData/weibo_follows.csv");
		// File weiboRelation=new File("D:/Whuer/FormerData/200_user_OFS");
		 String[] arr=uidfLine.split(" ");
		 LineIterator it=null;
		 StringBuilder edgeStr=new StringBuilder();
		 String uid=arr[0].trim();
		 Set<String> set=new HashSet<String>();
		 //System.out.println(uidfLine);
		 for(int i=1;i<arr.length;i++){
			 set.add(arr[i]);
			 edgeStr.append(uid+" "+arr[i]);
			 edgeStr.append("\n");
		 }
		 try {
			it = FileUtils.lineIterator(weiboRelation);
			while(it.hasNext()){
				String line=it.nextLine();
				String[] arr2=line.split(",");
				if(set.contains(arr2[0])&&set.contains(arr2[1])){
					edgeStr.append(arr2[0]+" "+arr2[1]);
					edgeStr.append("\n");
				}
			}
			//System.out.println(edgeStr);
			//FileUtils.write(new File("E:/spam/3.1_graphFetures/graphs_friends/".trim()+uid+".txt"), edgeStr.toString());
			//FileUtils.write(new File("E:/new/120graphs_friends/".trim()+uid+".txt"), edgeStr.toString());
			FileUtils.write(new File("E:/normal/3.1_graphFetures/graphs_follows/".trim()+uid+".txt"), edgeStr.toString());
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 //System.out.println(edgeStr);
	
	 }
	 
	 /**第二步1
	  * 预处理follows_user.csv文件，从中提取潜在垃圾用户ID所有对应的 关系
	  * @param filePath
	  */
	 
    public static    void extractALlRelation(String followsFilePath,String uidFilePath,String resultFilePath){
   	 File followFile=new File(followsFilePath);
   	 File uidFile =new File(uidFilePath);
   	 LineIterator it=null;
   	 LineIterator iter=null;
   	  HashSet<String> set=new HashSet<String>();
   	  StringBuilder str1=null;
   	  String line;
   	 FileWriter fw=null;
   	 int total1=0;int total2=0;
			  try {
			    fw = new FileWriter(resultFilePath,true); 
				it = FileUtils.lineIterator(followFile, "UTF-8");
				iter = FileUtils.lineIterator(uidFile, "UTF-8");
				while(iter.hasNext()){
					total1++;
					str1=new StringBuilder(iter.nextLine());
					set.add(str1.toString().trim());
				}
				//逐行遍历原始数据文件，
				while(it.hasNext()){
					total2++;
					//str2=new StringBuilder(it.nextLine());
					//String[] arr=str2.toString().split(",");
					line=it.nextLine();
					String[] arr=line.split(",");
					//提取目标用户作为粉丝，和被关注者所有的关系信息
					if(set.contains(arr[0])||set.contains(arr[1])){
					//提取目标用户仅作为粉丝，所有的关系
						//if(set.contains(arr[0])){
					//提取目标用户仅作为被关注者的所有的关系信息
					//if(set.contains(arr[1])){
						//fw.write(str2.toString());
						fw.write(line);
						fw.write("\n");
					}
					fw.flush();
			
				}
				
				System.out.println("UID遍历的总行数为："+total1+
						"   weibo_follows.csv的总行数是："+total2);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				} finally{
			   LineIterator.closeQuietly(it);
			   if (fw != null)  
	                try {  
	                    fw.close();  
	                } catch (IOException e) {  
	                    throw new RuntimeException("关闭失败！");  
	                }  
		}
   	 return ;
    }
   /**
    * 得到uidFriends或者uidfollows文件中的所有的uid集合
    */
    public  static void getUIDSet(){
    	Utils utils=new Utils();
    	Set<String> set=new HashSet<String>();
    	set=utils.readToSet3("E:/spam/3_UltimateSelected/uidfriends_selected.txt");
    	utils.saveResultBySet(set, "E:/spam/3.1_graphFetures/uidfriends_set.txt");
    }
}
